L = [2, 1, 3, 4, 8, 7, 5, 6, 9]
# 冒泡算法
"""
例如从左开始取第1个元素p0，与后面的一个元素p1比较大小，如果大于p0 > p1,
那么将p1排到p0前面(p0与p1交换位置)，然后再拿p0与p2比较，依此类推，直到与p8(最后一个元素)比较，进行过一轮排序后，再重复上述过程
"""
def mysort(l):
    n = len(l)
    for i in range(n - 1, 0, -1):
        for j in range(i):
            if l[j] > l[j + 1]:
                l[j], l[j + 1] = l[j + 1], l[j]

mysort(L)
print(L)
# Output:[1, 2, 3, 4, 5, 6, 7, 8, 9]

# 插入算法
"""
取列表中的第二个元素p1与第一个元素p0比较，如果p1小于p0,将p1排到p0前面(p0与p1交换位置),依次取后面的元素与前面已经拍过序的元素比较,根据大小来交换位置
"""

def insert_sort(L):
    n = len(L)
    for i in range(1, n):
        while i > 0:
            if L[i] < L[i - 1]:
                L[i], L[i - 1] = L[i - 1], L[i]
                i -= 1
            else:
                break

insert_sort(L)
print(L)
# Output:[1, 2, 3, 4, 5, 6, 7, 8, 9]

"""
树: 是一种抽象数据类型

特点:
1、每个节点有零个或者多个子节点
2、没有父节点的节点成为根节点
3、每一个非根节点有且只有一个父节点
4、除了根节点外，每个子节点可以分为多个不相交的子树
树的术语：
1、节点的度：一个节点含有的子树的个数称为该节点的度
2、树的度 ：一颗树中，最大的节点的度成为树的度
3、叶节点|终端节点:度为零的节点
4、父节点:如果一个节点含有子节点，那么这个节点成为它子节点的父节点
5、子节点:一个节点含有的子树的根节点成为该节点的子节点
6、兄弟节点:具有相同父节点的节点互称为兄弟节点
7、堂兄弟节点:父节点在统一层的节点互为堂兄弟节点
8、节点的层次:从根开始定义起，根为第一层，跟的子节点为第二层，以此类推
9、树的高度或者深度:树中节点的最大层次
10、节点的祖先:从根到该节点所经分支上的所有节点
11、子孙:以某节点为根的子树中任意节点都称为该节点的子孙
12、森林:由m棵互不相交的树的集合称为森林
"""